export const TEXT = {
  // Error messages
  ERROR_UNKNOWN_SECRET: 'Secret not found',
  ERROR_FORBIDDEN_DOMAIN: 'Domain not allowed by policy',
  ERROR_FORBIDDEN_ACTION: 'Action not allowed by policy',
  ERROR_TTL_EXPIRED: 'Secret has expired',
  ERROR_RATE_LIMITED: 'Rate limit exceeded',
  ERROR_PAYLOAD_TOO_LARGE: 'Payload size exceeds limit',
  ERROR_MISSING_ENV: 'Environment variable not set',
  ERROR_TIMEOUT: 'Request timed out',
  ERROR_INVALID_REQUEST: 'Invalid request format',
  ERROR_POLICY_NOT_FOUND: 'Policy not found for secret',
  ERROR_POLICY_EXPIRED: 'Policy has expired',
  ERROR_NO_MAPPING: 'No mapping found for secret',
  ERROR_INVALID_ACTION: 'Invalid action format',
  ERROR_INVALID_DOMAIN: 'Invalid domain format',
  ERROR_INVALID_CONFIG: 'Invalid configuration',
  ERROR_DUPLICATE_SECRET_ID: 'Duplicate secret ID',
  ERROR_INVALID_SECRET_ID_FORMAT: 'Invalid secret ID format',
  ERROR_INVALID_ENV_VAR_FORMAT: 'Invalid environment variable format',
  ERROR_SECRET_ID_TOO_LONG: 'Secret ID exceeds maximum length',
  ERROR_SECRET_ID_TOO_SHORT: 'Secret ID is too short',
  ERROR_ENV_VAR_TOO_SHORT: 'Environment variable name is too short',
  ERROR_INVALID_POLICY_STRUCTURE: 'Invalid policy structure',
  ERROR_MISSING_POLICY_FIELD: 'Required policy field missing',
  ERROR_INVALID_ALLOWED_ACTIONS: 'Invalid allowed actions',
  ERROR_INVALID_ALLOWED_DOMAINS: 'Invalid allowed domains',
  ERROR_INVALID_RATE_LIMIT: 'Invalid rate limit configuration',
  ERROR_INVALID_EXPIRATION: 'Invalid expiration date',
  ERROR_EMPTY_ALLOWED_ACTIONS: 'Allowed actions cannot be empty',
  ERROR_EMPTY_ALLOWED_DOMAINS: 'Allowed domains cannot be empty',
  ERROR_DUPLICATE_POLICY: 'Duplicate policy for secret ID',
  ERROR_UNSUPPORTED_ACTION: 'Unsupported action',
  ERROR_POLICIES_NOT_LOADED: 'Policies not loaded',
  ERROR_NETWORK_ERROR: 'Network request failed',
  ERROR_EMPTY_HEADER_NAME: 'Header name cannot be empty',
  ERROR_UNKNOWN_TOOL: 'Unknown tool requested',
  ERROR_TOOL_EXECUTION_FAILED: 'Tool execution failed',
  ERROR_DUPLICATE_TOOL: 'Duplicate tool registration',
  ERROR_INVALID_METHOD: 'Invalid HTTP method',
  ERROR_INVALID_INJECTION_TYPE: 'Invalid injection type',
  ERROR_INVALID_URL: 'Invalid URL format',
  ERROR_INVALID_HEADERS: 'Invalid headers format',
  ERROR_EXECUTION_FAILED: 'Execution failed',
  ERROR_DOMAIN_TOO_SHORT: 'Domain name is too short',
  ERROR_DOMAIN_TOO_LONG: 'Domain name exceeds maximum length',
  ERROR_INVALID_DOMAIN_FORMAT: 'Invalid domain format',
  ERROR_URL_TOO_LONG: 'URL exceeds maximum length',
  ERROR_HTTPS_REQUIRED: 'HTTPS is required for security',
  ERROR_INVALID_URL_FORMAT: 'Invalid URL format',
  ERROR_ACTION_TOO_LONG: 'Action exceeds maximum length',
  ERROR_INVALID_ACTION_FORMAT: 'Invalid action format',
  ERROR_HEADER_NAME_TOO_LONG: 'Header name exceeds maximum length',
  ERROR_INVALID_HEADER_NAME_FORMAT: 'Invalid header name format',
  ERROR_HEADER_VALUE_TOO_LONG: 'Header value exceeds maximum length',
  
  // Success messages
  SUCCESS_REQUEST_COMPLETED: 'Request completed successfully',
  SUCCESS_POLICY_LOADED: 'Policy loaded successfully',
  SUCCESS_AUDIT_WRITTEN: 'Audit entry written',
  
  // Field names
  FIELD_SECRET_ID: 'secretId',
  FIELD_ACTION: 'action',
  FIELD_TYPE: 'type',
  FIELD_URL: 'url',
  FIELD_INJECTION_TYPE_LOWER: 'injectionType',
  FIELD_DOMAIN: 'domain',
  FIELD_TIMESTAMP: 'timestamp',
  FIELD_OUTCOME: 'outcome',
  FIELD_REASON: 'reason',
  FIELD_ENV_VAR: 'envVar',
  FIELD_ALLOWED_ACTIONS: 'allowedActions',
  FIELD_ALLOWED_DOMAINS: 'allowedDomains',
  FIELD_RATE_LIMIT: 'rateLimit',
  FIELD_EXPIRES_AT: 'expiresAt',
  FIELD_REQUESTS: 'requests',
  FIELD_WINDOW_SECONDS: 'windowSeconds',
  FIELD_METHOD: 'method',
  FIELD_PAGE: 'page',
  FIELD_PAGE_SIZE: 'pageSize',
  FIELD_TOTAL_COUNT: 'totalCount',
  FIELD_HAS_MORE: 'hasMore',
  FIELD_START_TIME: 'startTime',
  FIELD_END_TIME: 'endTime',
  FIELD_SECRETS: 'secrets',
  FIELD_AVAILABLE: 'available',
  FIELD_DESCRIPTION: 'description',
  FIELD_ENTRIES: 'entries',
  FIELD_ERROR: 'error',
  FIELD_CODE: 'code',
  FIELD_MESSAGE: 'message',
  FIELD_HEADER_NAME: 'headerName',
  FIELD_HEADER_VALUE: 'headerValue',
  
  // Log messages
  LOG_SERVER_STARTED: 'MCP server started',
  LOG_SERVER_STOPPED: 'MCP server stopped',
  LOG_SHUTDOWN_HANDLER_ERROR: 'Shutdown handler error',
  LOG_PROCESSING_REQUEST: 'Processing request',
  LOG_REQUEST_DENIED: 'Request denied',
  LOG_REQUEST_ALLOWED: 'Request allowed',
  LOG_LOADING_POLICIES: 'Loading policies',
  LOG_LOADING_MAPPINGS: 'Loading ENV mappings',
  
  // Audit outcomes
  AUDIT_OUTCOME_SUCCESS: 'success',
  AUDIT_OUTCOME_DENIED: 'denied',
  AUDIT_OUTCOME_ERROR: 'error',
  
  // HTTP methods
  HTTP_METHOD_GET: 'http_get',
  HTTP_METHOD_POST: 'http_post',
  HTTP_VERB_GET: 'GET',
  HTTP_VERB_POST: 'POST',
  
  // Injection types
  INJECTION_TYPE_BEARER: 'bearer',
  INJECTION_TYPE_HEADER: 'header',
  
  // Header names
  AUTHORIZATION_HEADER: 'Authorization',
  SECRET_HEADER_NAME: 'X-Secret',
  
  // Response messages
  RESPONSE_NO_SECRETS: 'No secrets configured',
  RESPONSE_POLICY_DESCRIPTION: 'Policy for secret',
  RESPONSE_AUDIT_ENTRIES: 'Audit entries',
  
  // Validation messages
  VALIDATION_REQUIRED_FIELD: 'Required field missing',
  VALIDATION_INVALID_TYPE: 'Invalid field type',
  VALIDATION_INVALID_FORMAT: 'Invalid format',
  
  // Tool names
  TOOL_DISCOVER: 'discover_secrets',
  TOOL_DESCRIBE: 'describe_policy',
  TOOL_USE: 'use_secret',
  TOOL_AUDIT: 'query_audit',
  
  // Tool descriptions
  TOOL_DESC_DISCOVER: 'List available secrets',
  TOOL_DESC_DESCRIBE: 'Get policy details for a secret',
  TOOL_DESC_USE: 'Use a secret to perform an action',
  TOOL_DESC_AUDIT: 'Query audit log entries',
  TOOL_DISCOVER_DESCRIPTION: 'List all available secret identifiers and their metadata',
  TOOL_AUDIT_DESCRIPTION: 'Query audit log entries with filtering and pagination',
  
  // Input field descriptions
  INPUT_DESC_SECRET_ID: 'The ID of the secret to describe policy for',
  INPUT_DESC_USE_SECRET_ID: 'The ID of the secret to use',
  INPUT_DESC_ACTION: 'The action to perform with the secret',
  INPUT_DESC_ACTION_TYPE: 'The type of action to perform',
  INPUT_DESC_ACTION_URL: 'The URL to make the request to',
  INPUT_DESC_ACTION_HEADERS: 'Optional headers for the request',
  INPUT_DESC_ACTION_BODY: 'Optional body for POST requests',
  INPUT_DESC_INJECTION_TYPE: 'How to inject the secret (bearer or header)',
  
  // Schema types
  SCHEMA_TYPE_OBJECT: 'object',
  SCHEMA_TYPE_STRING: 'string',
  
  // Schema field names (JSON Schema standard keywords)
  SCHEMA_PROPERTIES: 'properties',
  SCHEMA_REQUIRED: 'required',
  SCHEMA_TYPE: 'type',
  
  // Schema required arrays
  SCHEMA_REQUIRED_ACTION: ['type', 'url'] as string[],
  SCHEMA_REQUIRED_USE_SECRET: ['secretId', 'action'] as string[],
  
  // Field values
  FIELD_VALUE_UNKNOWN: 'unknown',
  FIELD_VALUE_INVALID: 'invalid',
  
  // Error message defaults
  ERROR_UNKNOWN: 'Unknown error',
  
  // MCP Test messages
  TEST_MCP_HANDSHAKE: 'Testing MCP protocol handshake',
  TEST_MCP_TOOL_DISCOVERY: 'Testing MCP tool discovery',
  TEST_MCP_TOOL_EXECUTION: 'Testing MCP tool execution',
  TEST_MCP_ERROR_HANDLING: 'Testing MCP error handling',
  TEST_MCP_CONCURRENT_REQUESTS: 'Testing MCP concurrent requests',
  TEST_MCP_PAYLOAD_SNAPSHOT: 'Testing MCP payload snapshot',
  TEST_MCP_PROTOCOL_FLOW: 'Testing MCP protocol flow',
  TEST_MCP_RATE_LIMITING: 'Testing MCP rate limiting',
  TEST_MCP_AUDIT_TRAIL: 'Testing MCP audit trail verification',
  
  // Test descriptions for snapshots
  SNAPSHOT_DESC_TOOL_METADATA: 'Tool metadata snapshot',
  SNAPSHOT_DESC_SUCCESS_RESPONSE: 'Successful response snapshot',
  SNAPSHOT_DESC_ERROR_RESPONSE: 'Error response snapshot',
  SNAPSHOT_DESC_EMPTY_RESPONSE: 'Empty response snapshot',
  SNAPSHOT_DESC_PAGINATION: 'Pagination snapshot',
  SNAPSHOT_DESC_COMPLEX_OBJECT: 'Complex object snapshot',
  
  // Schema generation messages
  SCHEMA_GENERATION_SUCCESS: 'JSON Schema generated successfully',
  SCHEMA_GENERATION_FAILED: 'Failed to generate JSON Schema',
  SCHEMA_REMINDER_EXACT_FQDN: 'Remember: All domains must be exact FQDNs - wildcards are not allowed',
  SCHEMA_TITLE: 'MCP Secrets Vault Configuration',
  SCHEMA_DESCRIPTION: 'Configuration schema for MCP Secrets Vault. All domains must be exact FQDNs - wildcards are not allowed.',
  SCHEMA_DOMAIN_ITEM_DESC: 'Exact FQDN only (e.g., "api.example.com"). Wildcards (*, ?, []) are NOT allowed.',
  SCHEMA_DOMAIN_LIST_DESC: 'List of exact FQDNs that can be accessed with this secret. No wildcards allowed.',
  
  // Doctor CLI messages
  DOCTOR_HEADER: 'MCP Secrets Vault - System Diagnostics',
  DOCTOR_CHECKING_CONFIG: 'Checking configuration...',
  DOCTOR_CONFIG_VALID: 'Configuration is valid',
  DOCTOR_CONFIG_INVALID: 'Configuration is invalid',
  DOCTOR_CONFIG_NOT_FOUND: 'Configuration file not found',
  DOCTOR_CHECKING_ENV_VARS: 'Checking environment variables...',
  DOCTOR_ENV_VAR_SET: 'Environment variable is set',
  DOCTOR_ENV_VAR_NOT_SET: 'Environment variable is not set',
  DOCTOR_CHECKING_DOMAINS: 'Checking domain configurations...',
  DOCTOR_DOMAIN_VALID: 'Domain configuration is valid',
  DOCTOR_DOMAIN_DUPLICATE: 'Duplicate domain detected',
  DOCTOR_DOMAIN_SUSPICIOUS: 'Suspicious domain pattern detected',
  DOCTOR_CHECKING_LIMITS: 'Checking rate limits...',
  DOCTOR_LIMIT_REASONABLE: 'Rate limit is reasonable',
  DOCTOR_LIMIT_TOO_HIGH: 'Rate limit may be too high',
  DOCTOR_LIMIT_TOO_LOW: 'Rate limit may be too low',
  DOCTOR_CHECK_PASSED: 'All checks passed',
  DOCTOR_CHECK_WARNINGS: 'Checks completed with warnings',
  DOCTOR_CHECK_ERRORS: 'Checks completed with errors',
  DOCTOR_STATUS_OK: 'OK',
  DOCTOR_STATUS_WARN: 'WARN',
  DOCTOR_STATUS_ERROR: 'ERROR',
  DOCTOR_SECRET_NOT_IN_ENV: 'Secret ID mapped but ENV variable not set',
  DOCTOR_POLICY_WITHOUT_MAPPING: 'Policy exists but no mapping found',
  DOCTOR_EXPIRED_POLICY: 'Policy has already expired',
  DOCTOR_EXPIRING_SOON: 'Policy expires soon',
  DOCTOR_NO_POLICIES: 'No policies defined for mapped secrets',
  DOCTOR_AUDIT_DIR_NOT_WRITABLE: 'Audit directory is not writable',
  DOCTOR_AUDIT_DIR_CREATED: 'Audit directory created',
  DOCTOR_FILE_SIZE_WARNING: 'Max file size may be too large',
  DOCTOR_FILE_AGE_WARNING: 'Max file age may be too long',
  DOCTOR_SUMMARY_HEADER: 'Diagnostic Summary',
  DOCTOR_TOTAL_CHECKS: 'Total checks',
  DOCTOR_PASSED_CHECKS: 'Passed',
  DOCTOR_WARNINGS: 'Warnings',
  DOCTOR_ERRORS: 'Errors',
  DOCTOR_RUNNING_CHECK: 'Running check',
  DOCTOR_HELP_TEXT: 'Use this tool to diagnose configuration and setup issues',
  
  // Index.ts
  DOCTOR_CLI_FAILED: 'Doctor CLI failed',
  
  // Doctor check names
  DOCTOR_CHECK_CONFIG_SCHEMA: 'Configuration Schema',
  DOCTOR_CHECK_ENV_VARS: 'Environment Variables',
  DOCTOR_CHECK_DOMAINS: 'Domain Configuration',
  DOCTOR_CHECK_RATE_LIMITS: 'Rate Limits',
  DOCTOR_CHECK_AUDIT_DIR: 'Audit Directory',
  DOCTOR_CHECK_POLICY_STATUS: 'Policy Status',
  
  // Doctor messages (ALL literals must be replaced)
  DOCTOR_ENV_ALL_SET: 'All {count} secrets have configured environment variables',
  DOCTOR_ENV_NONE_SET: 'No environment variables are set',
  DOCTOR_DOMAIN_HAS_ISSUES: 'Domain configuration has issues',
  DOCTOR_LIMITS_NEED_ADJUSTMENT: 'Some rate limits may need adjustment',
  DOCTOR_AUDIT_WRITABLE_WITH_WARNINGS: 'Audit directory is writable but has warnings',
  DOCTOR_AUDIT_WRITABLE: 'Audit directory is writable: {path}',
  DOCTOR_POLICIES_ALL_VALID: 'All policies are valid and properly mapped',
  DOCTOR_POLICIES_NEED_ATTENTION: 'Policy configuration needs attention',
  DOCTOR_DOMAIN_COUNT_INFO: 'Total unique domains: {count}',
  DOCTOR_LIMIT_WINDOW_SHORT: 'Window too short ({seconds}s)',
  DOCTOR_LIMIT_WINDOW_LONG: 'Window too long ({seconds}s)',
  DOCTOR_NO_DOMAINS_CONFIGURED: '{secretId}: No domains configured',
  DOCTOR_TOO_MANY_DOMAINS: '{secretId}: Too many domains ({count})',
  DOCTOR_ANALYZING: 'Analyzing: {path}',
  DOCTOR_VERSION_INFO: 'Version: {version}',
  DOCTOR_MAPPINGS_INFO: 'Mappings: {count}',
  DOCTOR_POLICIES_INFO: 'Policies: {count}',
  
  // Config validator messages
  CONFIG_VALIDATOR_VERSION_MUST_BE: 'Must be {version} (current schema version)',
  CONFIG_VALIDATOR_WILDCARDS_NOT_ALLOWED: "Wildcards not allowed. Use exact FQDNs only (e.g., 'api.example.com')",
  CONFIG_VALIDATOR_VALIDATION_FAILED: 'Configuration validation failed:',
  CONFIG_VALIDATOR_DUPLICATE_SECRET: 'Duplicate secret ID found: {id}',
  CONFIG_VALIDATOR_DUPLICATE_POLICY: 'Duplicate policy for secret ID: {id}',
  CONFIG_VALIDATOR_DOMAIN_MUST_BE_FQDN: 'Domain must be an exact FQDN (no wildcards). Example: api.example.com',
  CONFIG_VALIDATOR_INVALID_ACTION: 'Invalid action. Supported actions: {actions}',
  CONFIG_VALIDATOR_NOTE_DOMAINS: 'Note: All domains must be exact FQDNs. Wildcards (*, ?, []) are not allowed.',
  CONFIG_VALIDATOR_ENV_VAR_FORMAT: 'Environment variable must be uppercase with underscores',
  
  // Validate-config messages (if needed for consistency)
  VALIDATE_HEADER: 'MCP Secrets Vault - Configuration Validator',
  VALIDATE_CHECKING_FILE: 'Validating: {path}',
  VALIDATE_FILE_EXISTS: 'File exists',
  VALIDATE_FILE_NOT_FOUND: 'File not found',
  VALIDATE_LOADING: 'Loading configuration...',
  VALIDATE_VALIDATING: 'Validating structure...',
  VALIDATE_STRUCTURE_VALID: 'Configuration structure is valid',
  
  // CLI status icons
  CLI_ICON_SUCCESS: '✅',
  CLI_ICON_WARNING: '⚠️ ',
  CLI_ICON_ERROR: '❌',
  
  // Index.ts messages
  INDEX_CONFIG_LOADED: 'Configuration loaded: {mappings} mappings, {policies} policies',
  INDEX_CONFIG_LOAD_FAILED: 'Failed to load configuration: {error}',
  INDEX_SERVER_START_FAILED: 'Failed to start server',
  
  // CLI commands
  CLI_COMMAND_DOCTOR: 'doctor',
  
  // Doctor CLI help text
  DOCTOR_HELP_HEADER: 'MCP Secrets Vault - Doctor CLI',
  DOCTOR_HELP_DESCRIPTION: 'Description:',
  DOCTOR_HELP_USAGE: 'Usage:',
  DOCTOR_HELP_ARGUMENTS: 'Arguments:',
  DOCTOR_HELP_EXAMPLES: 'Examples:',
  DOCTOR_HELP_EXIT_CODES: 'Exit Codes:',
  DOCTOR_HELP_CHECKS: 'Checks Performed:',
  DOCTOR_HELP_CONFIG_ARG: 'config-file    Path to configuration file (default: vault.config.json)',
  DOCTOR_HELP_EXAMPLE_DEFAULT: 'doctor                    # Check default vault.config.json',
  DOCTOR_HELP_EXAMPLE_CUSTOM: 'doctor my-config.json     # Check specific file',
  DOCTOR_HELP_EXAMPLE_HELP: 'doctor --help             # Show this help message',
  DOCTOR_HELP_EXIT_0: '0    All checks passed or only warnings',
  DOCTOR_HELP_EXIT_2: '2    Critical errors found',
  DOCTOR_HELP_CHECK_LIST: '• Configuration schema validity\n  • Environment variable existence\n  • Domain configuration coherence\n  • Rate limit reasonableness\n  • Audit directory accessibility\n  • Policy expiration status',
  DOCTOR_FILE_NOT_FOUND: 'File not found: {path}',
  DOCTOR_FATAL_ERROR: 'Fatal error:',
  
  // Validate-config CLI messages
  VALIDATE_CONFIG_HEADER: 'MCP Secrets Vault - Configuration Validator',
  VALIDATE_CONFIG_VALIDATING: 'Validating:',
  VALIDATE_CONFIG_FILE_EXISTS: 'File exists',
  VALIDATE_CONFIG_FILE_NOT_FOUND: 'File not found',
  VALIDATE_CONFIG_CREATE_TIP: 'Tip:',
  VALIDATE_CONFIG_CREATE_FILE_MSG: 'Create a vault.config.json file with the following structure:',
  VALIDATE_CONFIG_LOADING: 'Loading configuration...',
  VALIDATE_CONFIG_VALIDATING_STRUCTURE: 'Validating structure...',
  VALIDATE_CONFIG_STRUCTURE_VALID: 'Configuration structure is valid',
  VALIDATE_CONFIG_SUMMARY_HEADER: 'Configuration Summary',
  VALIDATE_CONFIG_VERSION_LABEL: 'Version',
  VALIDATE_CONFIG_MAPPINGS_LABEL: 'Mappings',
  VALIDATE_CONFIG_POLICIES_LABEL: 'Policies',
  VALIDATE_CONFIG_SECRET_MAPPINGS_HEADER: 'Secret Mappings:',
  VALIDATE_CONFIG_ACCESS_POLICIES_HEADER: 'Access Policies:',
  VALIDATE_CONFIG_ACTIONS_LABEL: 'Actions:',
  VALIDATE_CONFIG_DOMAINS_LABEL: 'Domains:',
  VALIDATE_CONFIG_EXACT_FQDNS_SUFFIX: 'exact FQDNs',
  VALIDATE_CONFIG_RATE_LIMIT_FORMAT: '{requests} requests per {windowSeconds}s',
  VALIDATE_CONFIG_RATE_LIMIT_LABEL: 'Rate Limit:',
  VALIDATE_CONFIG_EXPIRES_LABEL: 'Expires:',
  VALIDATE_CONFIG_CHECKING_DUPLICATES: 'Checking for duplicates...',
  VALIDATE_CONFIG_NO_DUPLICATES: 'No duplicate secret IDs found',
  VALIDATE_CONFIG_SETTINGS_HEADER: 'Settings:',
  VALIDATE_CONFIG_AUDIT_DIR_LABEL: 'Audit Directory',
  VALIDATE_CONFIG_MAX_FILE_SIZE_LABEL: 'Max File Size',
  VALIDATE_CONFIG_MAX_FILE_SIZE_SUFFIX: 'MB',
  VALIDATE_CONFIG_MAX_FILE_AGE_LABEL: 'Max File Age',
  VALIDATE_CONFIG_MAX_FILE_AGE_SUFFIX: 'days',
  VALIDATE_CONFIG_DEFAULT_RATE_LIMIT_LABEL: 'Default Rate Limit',
  VALIDATE_CONFIG_SECURITY_NOTES_HEADER: 'Security Notes',
  VALIDATE_CONFIG_IMPORTANT_LABEL: '⚠️  Important:',
  VALIDATE_CONFIG_NOTE_EXACT_FQDNS: '• All domains must be exact FQDNs (no wildcards)',
  VALIDATE_CONFIG_NOTE_ENV_NOT_CHECKED: '• Environment variables are NOT checked by this validator',
  VALIDATE_CONFIG_NOTE_USE_DOCTOR: '• Use the doctor CLI (Task-17) to verify environment setup',
  VALIDATE_CONFIG_NOTE_DENY_BY_DEFAULT: '• Configuration follows deny-by-default security posture',
  VALIDATE_CONFIG_SUCCESS: 'Configuration is valid!',
  VALIDATE_CONFIG_VALIDATION_FAILED: 'Validation failed:',
  VALIDATE_CONFIG_WILDCARDS_TIP: 'List each domain explicitly. For example:',
  VALIDATE_CONFIG_WILDCARDS_INSTEAD_OF: 'Instead of: "*.example.com"',
  VALIDATE_CONFIG_WILDCARDS_USE: 'Use: ["api.example.com", "www.example.com", "app.example.com"]',
  VALIDATE_CONFIG_JSON_TIP: 'Check your JSON syntax with a JSON validator',
  VALIDATE_CONFIG_HELP_HEADER: 'MCP Secrets Vault - Configuration Validator',
  VALIDATE_CONFIG_HELP_USAGE_LABEL: 'Usage:',
  VALIDATE_CONFIG_HELP_USAGE: 'validate-config [config-file]',
  VALIDATE_CONFIG_HELP_ARGUMENTS_LABEL: 'Arguments:',
  VALIDATE_CONFIG_HELP_CONFIG_FILE: 'config-file    Path to configuration file (default: vault.config.json)',
  VALIDATE_CONFIG_HELP_EXAMPLES_LABEL: 'Examples:',
  VALIDATE_CONFIG_HELP_EXAMPLE_DEFAULT: 'validate-config                    # Validate default vault.config.json',
  VALIDATE_CONFIG_HELP_EXAMPLE_CUSTOM: 'validate-config my-config.json     # Validate specific file',
  VALIDATE_CONFIG_HELP_EXAMPLE_HELP: 'validate-config --help             # Show this help message',
  VALIDATE_CONFIG_HELP_EXIT_CODES_LABEL: 'Exit Codes:',
  VALIDATE_CONFIG_HELP_EXIT_0: '0    Configuration is valid',
  VALIDATE_CONFIG_HELP_EXIT_2: '2    Configuration is invalid',
  VALIDATE_CONFIG_JSON_EXAMPLE: '{\n  "version": "1.0.0",\n  "mappings": [],\n  "policies": [],\n  "settings": {}\n}',
  VALIDATE_CONFIG_SECURITY_NOTE: 'Security Notes:\n  • Never commit actual secrets to version control\n  • Use environment variables for sensitive values\n  • Restrict file permissions appropriately',
  VALIDATE_CONFIG_HELP_TIP: 'Tip: Run with DEBUG=* for detailed validation output',
  VALIDATE_CONFIG_JSON_ERROR: ': Invalid JSON in {path}',
  
  
  // Tool query audit descriptions
  TOOL_QUERY_AUDIT_SECRET_DESC: 'Optional: Filter by secret ID',
  TOOL_QUERY_AUDIT_DOMAIN_DESC: 'Optional: Filter by domain',
  TOOL_QUERY_AUDIT_OUTCOME_DESC: 'Optional: Filter by outcome (success, denied, error)',
  TOOL_QUERY_AUDIT_START_DESC: 'Optional: Start time (ISO 8601)',
  TOOL_QUERY_AUDIT_END_DESC: 'Optional: End time (ISO 8601)',
  TOOL_QUERY_AUDIT_PAGE_DESC: 'Optional: Page number (default: 1)',
  TOOL_QUERY_AUDIT_PAGE_SIZE_DESC: 'Optional: Page size (default: 50, max: 500)',
  
  // Validation messages
  VALIDATION_NON_EMPTY_STRING: '{fieldName} must be a non-empty string'
} as const;

export type TextKey = keyof typeof TEXT;